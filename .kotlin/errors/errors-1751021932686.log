kotlin version: 2.0.21
error message: org.jetbrains.kotlin.backend.common.BackendException: Backend Internal error: Exception during IR lowering
File being compiled: C:/Users/vitor/AndroidStudioProjects/CryptTracker2.0/app/src/main/java/com/vitor/cryptotracker/data/api/CryptoCompareApi.kt.kt
The root cause java.lang.RuntimeException was thrown at: org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate(FunctionCodegen.kt:47)
	at org.jetbrains.kotlin.backend.common.CodegenUtil.reportBackendException(CodegenUtil.kt:253)
	at org.jetbrains.kotlin.backend.common.CodegenUtil.reportBackendException$default(CodegenUtil.kt:236)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invokeSequential(performByIrFile.kt:65)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invoke(performByIrFile.kt:52)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invoke(performByIrFile.kt:38)
	at org.jetbrains.kotlin.backend.common.phaser.NamedCompilerPhase.phaseBody(CompilerPhase.kt:166)
	at org.jetbrains.kotlin.backend.common.phaser.AbstractNamedCompilerPhase.invoke(CompilerPhase.kt:113)
	at org.jetbrains.kotlin.backend.common.phaser.CompositePhase.invoke(PhaseBuilders.kt:27)
	at org.jetbrains.kotlin.backend.common.phaser.CompositePhase.invoke(PhaseBuilders.kt:14)
	at org.jetbrains.kotlin.backend.common.phaser.NamedCompilerPhase.phaseBody(CompilerPhase.kt:166)
	at org.jetbrains.kotlin.backend.common.phaser.AbstractNamedCompilerPhase.invoke(CompilerPhase.kt:113)
	at org.jetbrains.kotlin.backend.common.phaser.CompilerPhaseKt.invokeToplevel(CompilerPhase.kt:62)
	at org.jetbrains.kotlin.backend.jvm.JvmIrCodegenFactory.invokeCodegen(JvmIrCodegenFactory.kt:371)
	at org.jetbrains.kotlin.codegen.CodegenFactory.generateModule(CodegenFactory.kt:47)
	at org.jetbrains.kotlin.codegen.KotlinCodegenFacade.compileCorrectFiles(KotlinCodegenFacade.java:45)
	at org.jetbrains.kotlin.kapt3.AbstractKapt3Extension.contextForStubGeneration(Kapt3Extension.kt:253)
	at org.jetbrains.kotlin.kapt3.AbstractKapt3Extension.analysisCompleted(Kapt3Extension.kt:149)
	at org.jetbrains.kotlin.kapt3.ClasspathBasedKapt3Extension.analysisCompleted(Kapt3Extension.kt:79)
	at org.jetbrains.kotlin.cli.jvm.compiler.TopDownAnalyzerFacadeForJVM.analyzeFilesWithJavaIntegration$invokeExtensionsOnAnalysisComplete(TopDownAnalyzerFacadeForJVM.kt:104)
	at org.jetbrains.kotlin.cli.jvm.compiler.TopDownAnalyzerFacadeForJVM.analyzeFilesWithJavaIntegration(TopDownAnalyzerFacadeForJVM.kt:114)
	at org.jetbrains.kotlin.cli.jvm.compiler.TopDownAnalyzerFacadeForJVM.analyzeFilesWithJavaIntegration$default(TopDownAnalyzerFacadeForJVM.kt:75)
	at org.jetbrains.kotlin.cli.jvm.compiler.KotlinToJVMBytecodeCompiler.analyze$lambda$12(KotlinToJVMBytecodeCompiler.kt:373)
	at org.jetbrains.kotlin.cli.common.messages.AnalyzerWithCompilerReport.analyzeAndReport(AnalyzerWithCompilerReport.kt:112)
	at org.jetbrains.kotlin.cli.jvm.compiler.KotlinToJVMBytecodeCompiler.analyze(KotlinToJVMBytecodeCompiler.kt:364)
	at org.jetbrains.kotlin.cli.jvm.compiler.KotlinToJVMBytecodeCompiler.runFrontendAndGenerateIrUsingClassicFrontend(KotlinToJVMBytecodeCompiler.kt:195)
	at org.jetbrains.kotlin.cli.jvm.compiler.KotlinToJVMBytecodeCompiler.compileModules$cli(KotlinToJVMBytecodeCompiler.kt:106)
	at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecute(K2JVMCompiler.kt:170)
	at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecute(K2JVMCompiler.kt:43)
	at org.jetbrains.kotlin.cli.common.CLICompiler.execImpl(CLICompiler.kt:103)
	at org.jetbrains.kotlin.cli.common.CLICompiler.execImpl(CLICompiler.kt:49)
	at org.jetbrains.kotlin.cli.common.CLITool.exec(CLITool.kt:101)
	at org.jetbrains.kotlin.incremental.IncrementalJvmCompilerRunner.runCompiler(IncrementalJvmCompilerRunner.kt:464)
	at org.jetbrains.kotlin.incremental.IncrementalJvmCompilerRunner.runCompiler(IncrementalJvmCompilerRunner.kt:73)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.doCompile(IncrementalCompilerRunner.kt:506)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileImpl(IncrementalCompilerRunner.kt:423)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileNonIncrementally(IncrementalCompilerRunner.kt:301)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compile(IncrementalCompilerRunner.kt:129)
	at org.jetbrains.kotlin.daemon.CompileServiceImplBase.execIncrementalCompiler(CompileServiceImpl.kt:675)
	at org.jetbrains.kotlin.daemon.CompileServiceImplBase.access$execIncrementalCompiler(CompileServiceImpl.kt:92)
	at org.jetbrains.kotlin.daemon.CompileServiceImpl.compile(CompileServiceImpl.kt:1660)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source)
	at java.base/java.lang.reflect.Method.invoke(Unknown Source)
	at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(Unknown Source)
	at java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)
	at java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)
	at java.base/java.security.AccessController.doPrivileged(Unknown Source)
	at java.rmi/sun.rmi.transport.Transport.serviceCall(Unknown Source)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(Unknown Source)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(Unknown Source)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(Unknown Source)
	at java.base/java.security.AccessController.doPrivileged(Unknown Source)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(Unknown Source)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.base/java.lang.Thread.run(Unknown Source)
Caused by: java.lang.RuntimeException: Exception while generating code for:
FUN FUNCTION_FOR_DEFAULT_PARAMETER name:getTopCryptocurrencies$default visibility:public modality:OPEN <> ($this:com.vitor.cryptotracker.data.api.CryptoCompareApi.kt, currency:kotlin.String?, order:kotlin.String?, perPage:kotlin.Int, page:kotlin.Int, sparkline:kotlin.Boolean, $completion:kotlin.coroutines.Continuation<kotlin.collections.List<IrErrorType([Error type: Unresolved type for Cryptocurrency])>>, $mask0:kotlin.Int, $handler:kotlin.Any?) returnType:kotlin.Any? [suspend]
  annotations:
    GET(value = "coins/markets")
  VALUE_PARAMETER MOVED_DISPATCH_RECEIVER name:$this index:0 type:com.vitor.cryptotracker.data.api.CryptoCompareApi.kt
  VALUE_PARAMETER name:currency index:1 type:kotlin.String? [assignable]
    annotations:
      Query(value = "vs_currency", encoded = <null>)
    EXPRESSION_BODY
      ERROR_EXPR 'Default Stub' type=kotlin.String
  VALUE_PARAMETER name:order index:2 type:kotlin.String? [assignable]
    annotations:
      Query(value = "order", encoded = <null>)
    EXPRESSION_BODY
      ERROR_EXPR 'Default Stub' type=kotlin.String
  VALUE_PARAMETER name:perPage index:3 type:kotlin.Int [assignable]
    annotations:
      Query(value = "per_page", encoded = <null>)
    EXPRESSION_BODY
      ERROR_EXPR 'Default Stub' type=kotlin.Int
  VALUE_PARAMETER name:page index:4 type:kotlin.Int [assignable]
    annotations:
      Query(value = "page", encoded = <null>)
    EXPRESSION_BODY
      ERROR_EXPR 'Default Stub' type=kotlin.Int
  VALUE_PARAMETER name:sparkline index:5 type:kotlin.Boolean [assignable]
    annotations:
      Query(value = "sparkline", encoded = <null>)
    EXPRESSION_BODY
      ERROR_EXPR 'Default Stub' type=kotlin.Boolean
  VALUE_PARAMETER CONTINUATION_CLASS name:$completion index:6 type:kotlin.coroutines.Continuation<kotlin.collections.List<IrErrorType([Error type: Unresolved type for Cryptocurrency])>>
  VALUE_PARAMETER MASK_FOR_DEFAULT_FUNCTION name:$mask0 index:7 type:kotlin.Int
  VALUE_PARAMETER METHOD_HANDLER_IN_DEFAULT_FUNCTION name:$handler index:8 type:kotlin.Any?
  BLOCK_BODY
    WHEN type=kotlin.Unit origin=null
      BRANCH
        if: CALL 'public final fun not (): kotlin.Boolean [operator] declared in kotlin.Boolean' type=kotlin.Boolean origin=EXCL
          $this: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            arg0: GET_VAR '$handler: kotlin.Any? declared in com.vitor.cryptotracker.data.api.CryptoCompareApi.kt.DefaultImpls.getTopCryptocurrencies$default' type=kotlin.Any? origin=null
            arg1: CONST Null type=kotlin.Nothing? value=null
        then: CALL 'public final fun throwUnsupportedOperationException (message: kotlin.String): kotlin.Nothing declared in kotlin.jvm.internal.Intrinsics' type=kotlin.Nothing origin=null
          message: CONST String type=kotlin.String value="Super calls with default arguments not supported in this target, function: getTopCryptocurrencies"
    WHEN type=kotlin.Unit origin=null
      BRANCH
        if: CALL 'public final fun not (): kotlin.Boolean [operator] declared in kotlin.Boolean' type=kotlin.Boolean origin=EXCLEQ
          $this: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EXCLEQ
            arg0: CALL 'public final fun and (other: kotlin.Int): kotlin.Int [infix] declared in kotlin.Int' type=kotlin.Int origin=null
              $this: GET_VAR '$mask0: kotlin.Int declared in com.vitor.cryptotracker.data.api.CryptoCompareApi.kt.DefaultImpls.getTopCryptocurrencies$default' type=kotlin.Int origin=null
              other: CONST Int type=kotlin.Int value=1
            arg1: CONST Int type=kotlin.Int value=0
        then: SET_VAR 'currency: kotlin.String? [assignable] declared in com.vitor.cryptotracker.data.api.CryptoCompareApi.kt.DefaultImpls.getTopCryptocurrencies$default' type=kotlin.Unit origin=EQ
          ERROR_EXPR 'KtStringTemplateExpression' type=kotlin.Nothing
    WHEN type=kotlin.Unit origin=null
      BRANCH
        if: CALL 'public final fun not (): kotlin.Boolean [operator] declared in kotlin.Boolean' type=kotlin.Boolean origin=EXCLEQ
          $this: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EXCLEQ
            arg0: CALL 'public final fun and (other: kotlin.Int): kotlin.Int [infix] declared in kotlin.Int' type=kotlin.Int origin=null
              $this: GET_VAR '$mask0: kotlin.Int declared in com.vitor.cryptotracker.data.api.CryptoCompareApi.kt.DefaultImpls.getTopCryptocurrencies$default' type=kotlin.Int origin=null
              other: CONST Int type=kotlin.Int value=2
            arg1: CONST Int type=kotlin.Int value=0
        then: SET_VAR 'order: kotlin.String? [assignable] declared in com.vitor.cryptotracker.data.api.CryptoCompareApi.kt.DefaultImpls.getTopCryptocurrencies$default' type=kotlin.Unit origin=EQ
          ERROR_EXPR 'KtStringTemplateExpression' type=kotlin.Nothing
    WHEN type=kotlin.Unit origin=null
      BRANCH
        if: CALL 'public final fun not (): kotlin.Boolean [operator] declared in kotlin.Boolean' type=kotlin.Boolean origin=EXCLEQ
          $this: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EXCLEQ
            arg0: CALL 'public final fun and (other: kotlin.Int): kotlin.Int [infix] declared in kotlin.Int' type=kotlin.Int origin=null
              $this: GET_VAR '$mask0: kotlin.Int declared in com.vitor.cryptotracker.data.api.CryptoCompareApi.kt.DefaultImpls.getTopCryptocurrencies$default' type=kotlin.Int origin=null
              other: CONST Int type=kotlin.Int value=4
            arg1: CONST Int type=kotlin.Int value=0
        then: SET_VAR 'perPage: kotlin.Int [assignable] declared in com.vitor.cryptotracker.data.api.CryptoCompareApi.kt.DefaultImpls.getTopCryptocurrencies$default' type=kotlin.Unit origin=EQ
          ERROR_EXPR 'KtConstantExpression' type=kotlin.Nothing
    WHEN type=kotlin.Unit origin=null
      BRANCH
        if: CALL 'public final fun not (): kotlin.Boolean [operator] declared in kotlin.Boolean' type=kotlin.Boolean origin=EXCLEQ
          $this: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EXCLEQ
            arg0: CALL 'public final fun and (other: kotlin.Int): kotlin.Int [infix] declared in kotlin.Int' type=kotlin.Int origin=null
              $this: GET_VAR '$mask0: kotlin.Int declared in com.vitor.cryptotracker.data.api.CryptoCompareApi.kt.DefaultImpls.getTopCryptocurrencies$default' type=kotlin.Int origin=null
              other: CONST Int type=kotlin.Int value=8
            arg1: CONST Int type=kotlin.Int value=0
        then: SET_VAR 'page: kotlin.Int [assignable] declared in com.vitor.cryptotracker.data.api.CryptoCompareApi.kt.DefaultImpls.getTopCryptocurrencies$default' type=kotlin.Unit origin=EQ
          ERROR_EXPR 'KtConstantExpression' type=kotlin.Nothing
    WHEN type=kotlin.Unit origin=null
      BRANCH
        if: CALL 'public final fun not (): kotlin.Boolean [operator] declared in kotlin.Boolean' type=kotlin.Boolean origin=EXCLEQ
          $this: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EXCLEQ
            arg0: CALL 'public final fun and (other: kotlin.Int): kotlin.Int [infix] declared in kotlin.Int' type=kotlin.Int origin=null
              $this: GET_VAR '$mask0: kotlin.Int declared in com.vitor.cryptotracker.data.api.CryptoCompareApi.kt.DefaultImpls.getTopCryptocurrencies$default' type=kotlin.Int origin=null
              other: CONST Int type=kotlin.Int value=16
            arg1: CONST Int type=kotlin.Int value=0
        then: SET_VAR 'sparkline: kotlin.Boolean [assignable] declared in com.vitor.cryptotracker.data.api.CryptoCompareApi.kt.DefaultImpls.getTopCryptocurrencies$default' type=kotlin.Unit origin=EQ
          ERROR_EXPR 'KtConstantExpression' type=kotlin.Nothing
    RETURN type=kotlin.Nothing from='public open fun getTopCryptocurrencies$default ($this: com.vitor.cryptotracker.data.api.CryptoCompareApi.kt, currency: kotlin.String?, order: kotlin.String?, perPage: kotlin.Int, page: kotlin.Int, sparkline: kotlin.Boolean, $completion: kotlin.coroutines.Continuation<kotlin.collections.List<IrErrorType([Error type: Unresolved type for Cryptocurrency])>>, $mask0: kotlin.Int, $handler: kotlin.Any?): kotlin.Any? [suspend] declared in com.vitor.cryptotracker.data.api.CryptoCompareApi.kt.DefaultImpls'
      CALL 'public abstract fun getTopCryptocurrencies (currency: kotlin.String, order: kotlin.String, perPage: kotlin.Int, page: kotlin.Int, sparkline: kotlin.Boolean, $completion: kotlin.coroutines.Continuation<kotlin.collections.List<IrErrorType([Error type: Unresolved type for Cryptocurrency])>>): kotlin.Any? [suspend] declared in com.vitor.cryptotracker.data.api.CryptoCompareApi.kt' type=kotlin.collections.List<IrErrorType([Error type: Unresolved type for Cryptocurrency])> origin=DEFAULT_STUB_CALL_TO_IMPLEMENTATION
        $this: GET_VAR '$this: com.vitor.cryptotracker.data.api.CryptoCompareApi.kt declared in com.vitor.cryptotracker.data.api.CryptoCompareApi.kt.DefaultImpls.getTopCryptocurrencies$default' type=com.vitor.cryptotracker.data.api.CryptoCompareApi.kt origin=null
        currency: TYPE_OP type=kotlin.String origin=IMPLICIT_CAST typeOperand=kotlin.String
          GET_VAR 'currency: kotlin.String? [assignable] declared in com.vitor.cryptotracker.data.api.CryptoCompareApi.kt.DefaultImpls.getTopCryptocurrencies$default' type=kotlin.String? origin=null
        order: TYPE_OP type=kotlin.String origin=IMPLICIT_CAST typeOperand=kotlin.String
          GET_VAR 'order: kotlin.String? [assignable] declared in com.vitor.cryptotracker.data.api.CryptoCompareApi.kt.DefaultImpls.getTopCryptocurrencies$default' type=kotlin.String? origin=null
        perPage: GET_VAR 'perPage: kotlin.Int [assignable] declared in com.vitor.cryptotracker.data.api.CryptoCompareApi.kt.DefaultImpls.getTopCryptocurrencies$default' type=kotlin.Int origin=null
        page: GET_VAR 'page: kotlin.Int [assignable] declared in com.vitor.cryptotracker.data.api.CryptoCompareApi.kt.DefaultImpls.getTopCryptocurrencies$default' type=kotlin.Int origin=null
        sparkline: GET_VAR 'sparkline: kotlin.Boolean [assignable] declared in com.vitor.cryptotracker.data.api.CryptoCompareApi.kt.DefaultImpls.getTopCryptocurrencies$default' type=kotlin.Boolean origin=null
        $completion: GET_VAR '$completion: kotlin.coroutines.Continuation<kotlin.collections.List<IrErrorType([Error type: Unresolved type for Cryptocurrency])>> declared in com.vitor.cryptotracker.data.api.CryptoCompareApi.kt.DefaultImpls.getTopCryptocurrencies$default' type=kotlin.coroutines.Continuation<kotlin.collections.List<IrErrorType([Error type: Unresolved type for Cryptocurrency])>> origin=null

	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate(FunctionCodegen.kt:47)
	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate$default(FunctionCodegen.kt:40)
	at org.jetbrains.kotlin.backend.jvm.codegen.ClassCodegen.generateMethodNode(ClassCodegen.kt:406)
	at org.jetbrains.kotlin.backend.jvm.codegen.ClassCodegen.generateMethod(ClassCodegen.kt:423)
	at org.jetbrains.kotlin.backend.jvm.codegen.ClassCodegen.generate(ClassCodegen.kt:168)
	at org.jetbrains.kotlin.backend.jvm.codegen.ClassCodegen.generate(ClassCodegen.kt:181)
	at org.jetbrains.kotlin.backend.jvm.FileCodegen.lower(JvmPhases.kt:39)
	at org.jetbrains.kotlin.backend.common.phaser.PhaseFactoriesKt.createFilePhase$lambda$4(PhaseFactories.kt:71)
	at org.jetbrains.kotlin.backend.common.phaser.PhaseBuildersKt$createSimpleNamedCompilerPhase$1.phaseBody(PhaseBuilders.kt:69)
	at org.jetbrains.kotlin.backend.common.phaser.SimpleNamedCompilerPhase.phaseBody(CompilerPhase.kt:226)
	at org.jetbrains.kotlin.backend.common.phaser.AbstractNamedCompilerPhase.invoke(CompilerPhase.kt:113)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invokeSequential(performByIrFile.kt:62)
	... 52 more
Caused by: java.lang.IllegalArgumentException: Invalid class name (must not contain . ; [ < > or :): com/vitor/cryptotracker/data/api/CryptoCompareApi.kt
	at org.jetbrains.org.objectweb.asm.util.CheckSignatureAdapter.checkClassName(CheckSignatureAdapter.java:343)
	at org.jetbrains.org.objectweb.asm.util.CheckSignatureAdapter.visitClassType(CheckSignatureAdapter.java:285)
	at org.jetbrains.kotlin.codegen.signature.BothSignatureWriter.writeClassBegin(BothSignatureWriter.java:78)
	at org.jetbrains.kotlin.codegen.signature.JvmSignatureWriter.writeAsmType(JvmSignatureWriter.java:45)
	at org.jetbrains.kotlin.codegen.signature.BothSignatureWriter.writeAsmType(BothSignatureWriter.java:72)
	at org.jetbrains.kotlin.backend.jvm.mapping.IrTypeMapper.writeGenericType(IrTypeMapper.kt:159)
	at org.jetbrains.kotlin.backend.jvm.mapping.IrTypeMapper.writeGenericType(IrTypeMapper.kt:42)
	at org.jetbrains.kotlin.types.AbstractTypeMapper.mapClassType(AbstractTypeMapper.kt:198)
	at org.jetbrains.kotlin.types.AbstractTypeMapper.mapType(AbstractTypeMapper.kt:89)
	at org.jetbrains.kotlin.types.AbstractTypeMapper.mapType(AbstractTypeMapper.kt:53)
	at org.jetbrains.kotlin.backend.jvm.mapping.IrTypeMapper.mapType(IrTypeMapper.kt:149)
	at org.jetbrains.kotlin.backend.jvm.codegen.ClassCodegen$typeMapper$1.mapType(ClassCodegen.kt:99)
	at org.jetbrains.kotlin.backend.jvm.mapping.MethodSignatureMapper.writeParameterType(MethodSignatureMapper.kt:392)
	at org.jetbrains.kotlin.backend.jvm.mapping.MethodSignatureMapper.writeParameter(MethodSignatureMapper.kt:377)
	at org.jetbrains.kotlin.backend.jvm.mapping.MethodSignatureMapper.mapSignature(MethodSignatureMapper.kt:260)
	at org.jetbrains.kotlin.backend.jvm.mapping.MethodSignatureMapper.mapSignature$default(MethodSignatureMapper.kt:220)
	at org.jetbrains.kotlin.backend.jvm.mapping.MethodSignatureMapper.mapSignatureWithGeneric(MethodSignatureMapper.kt:218)
	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.doGenerate(FunctionCodegen.kt:51)
	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate(FunctionCodegen.kt:44)
	... 63 more


